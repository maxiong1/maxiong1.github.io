(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{532:function(t,a,s){"use strict";s.r(a);var n=s(35),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"var-let-const-对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-let-const-对比"}},[t._v("#")]),t._v(" var let const 对比")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("redeclare 重复声明")]),t._v(" "),s("th",[t._v("hositing 变量提升")]),t._v(" "),s("th",[t._v("block scope 块级作用域")]),t._v(" "),s("th",[t._v("create global props 创建全局")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("var")]),t._v(" "),s("td",[t._v("true")]),t._v(" "),s("td",[t._v("true")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("let")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("true")]),t._v(" "),s("td",[t._v("false")])]),t._v(" "),s("tr",[s("td",[t._v("const")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("true")]),t._v(" "),s("td",[t._v("false")])])])]),t._v(" "),s("h2",{attrs:{id:"var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[t._v("#")]),t._v(" var")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("conosle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'111'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  this code after hoisting 变量提升后")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'111'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The JavaScript engine is not physically moving your code, your code stays where you typed it. javascript引擎并没有实际移动代码，而是将代码保留在输入时的位置。")]),t._v("\n")])])]),s("h4",{attrs:{id:"什么是变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是变量提升"}},[t._v("#")]),t._v(" 什么是变量提升")]),t._v(" "),s("p",[t._v("在编译阶段，在代码执行前几微秒，将扫描函数和变量声明。所有这些函数和变量声明都被添加到名为Lexical Environment['词汇环境']的JavaScript数据结构内的内存中。这样它们甚至可以在源代码中实际声明之前使用。")]),t._v(" "),s("h4",{attrs:{id:"提升var变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提升var变量"}},[t._v("#")]),t._v(" 提升var变量")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// outputs 'undefined'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'222'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("请记住JavaScript仅提升声明，而不是初始化。也就是说，在编译期间，JavaScript只在内存中存储函数和变量声明，而不是它们的赋值（值）。\n当JavaScript引擎var在编译阶段找到变量声明时，它会将该变量添加到词法环境中并在执行期间将其初始化值为"),s("code",[t._v("undefined")]),t._v("，当它到达在代码中完成实际赋值的行时，它将分配该值到变量。")]),t._v(" "),s("h2",{attrs:{id:"const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("const实际上保证的，并不是变量的值不得改动，"),s("ins",[t._v("而是变量指向的那个内存地址所保存的数据不得改动")]),t._v("。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。")])]),t._v(" "),s("h2",{attrs:{id:"暂时性死区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂时性死区"}},[t._v("#")]),t._v(" 暂时性死区")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。")])]),t._v(" "),s("p",[t._v("ES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。")]),t._v(" "),s("h2",{attrs:{id:"let-var-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let-var-区别"}},[t._v("#")]),t._v(" let var 区别")]),t._v(" "),s("ul",[s("li",[t._v("var在编译时初始化为"),s("code",[t._v("undefined")]),t._v("，let在编译时对其求值时才初始化为"),s("code",[t._v("value")])]),t._v(" "),s("li",[t._v("var全局作用域/函数作用域，let块/子块作用域; var可以在函数的任何地方访问，但是let和const只能在声明它们的块内访问。var是函数作用域，而let是块作用域")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES5  num的循环值为3，因此num具有全局范围")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log（num）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 1 2")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log（num）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6 当我们在for循环中使用let声明num时，for循环中的num具有完全不同的范围，而for循环之外的num具有不同的范围")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log（num）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 1 2")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log（num）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("引入 "),s("a",{attrs:{href:"https://overreacted.io/on-let-vs-const/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dan Abramov"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("I don’t care. remember that linters exist(存在) to serve you")]),t._v(" "),s("p",[t._v("This is something that can be linted and auto-fixed. You can have an opinion if you want, just like tabs vs. spaces, but it's something that automation handles in the day-to-day.")])])}),[],!1,null,null,null);a.default=e.exports}}]);