(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{537:function(t,e,a){"use strict";a.r(e);var n=a(35),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("正则表达式是用于匹配字符串中字符组合的模式。")]),t._v(" "),a("p",[t._v("在JavaScript 中，正则表达式也是对象。")]),t._v(" "),a("p",[t._v("这些模式被用于 RegExp 的 exec 和 test 方法以及 String 的 match、replace、search 和 split 方法")]),t._v(" "),a("p",[t._v('\\ 做为转意，即通常在""后面的字符不按原来意义解释，如/b/匹配字符"b"，当b前面加了反斜杆后/\\b/，转意为匹配一个单词的边界。')]),t._v(" "),a("p",[t._v('对正则表达式功能字符的还原，如"'),a("em",[t._v('"匹配它前面元字符0次或多次，/a')]),t._v('/将匹配a,aa,aaa，加了""后，/a*/将只匹配"a*"。')]),t._v(" "),a("h2",{attrs:{id:"创建一个正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个正则表达式"}},[t._v("#")]),t._v(" 创建一个正则表达式")]),t._v(" "),a("h6",{attrs:{id:"使用一个正则表达式字面量-适用于正则表达式是常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用一个正则表达式字面量-适用于正则表达式是常量"}},[t._v("#")]),t._v(" 使用一个正则表达式字面量，适用于正则表达式是常量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var re = /ab+c/\n")])])]),a("h6",{attrs:{id:"调用regexp对象的构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用regexp对象的构造函数"}},[t._v("#")]),t._v(" 调用RegExp对象的构造函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var re = new RegExp("ab+c")\n')])])]),a("p",[t._v("使用构造函数，提供了对正则表达式运行时的编译。当你知道正则表达式的模式会发生改变， 或者你事先并不了解它的模式或者是从其他地方（比如用户的输入），得到的代码这时比较适合用构造函数的方式。")]),t._v(" "),a("h5",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),a("ul",[a("li",[t._v('^ 匹配一个输入或一行的开头 /^a/.test("an A") true; /^a/.test("An a") false')]),t._v(" "),a("li",[t._v('$ 匹配一个输入或一行的结尾 /a$/.test("an A") false; /a$/.test("An a") true')]),t._v(" "),a("li",[a("ul",[a("li",[t._v("匹配签一个表达式0此或多次，等价于{0,}")])])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("匹配前面一个表达式1此或多次，等价于{1,}")])])]),t._v(" "),a("li",[t._v("? 匹配前面一个表达式0次或者1次，等价于{0,1}")]),t._v(" "),a("li",[t._v(". 匹配除了换行符(\\n)之外的任何单个字符")]),t._v(" "),a("li",[t._v("(X) 匹配x并且记住匹配项")]),t._v(" "),a("li",[t._v("(?:x) 匹配x但是不记住匹配项")]),t._v(" "),a("li",[t._v("x(?=y) 匹配x仅仅当x后面跟着y，正向肯定查找")]),t._v(" "),a("li",[t._v("x(?!y) 匹配x仅仅当x后面不跟着y，正向否定查找")]),t._v(" "),a("li",[t._v("x|y 匹配x或者y")]),t._v(" "),a("li",[t._v("{n} 匹配前面一个字符刚好发生了n次，n是正整数")]),t._v(" "),a("li",[t._v("{n,m} 匹配前面的字符至少n次，最多m次")]),t._v(" "),a("li",[t._v("[xyz] 匹配方括号中任意字符")]),t._v(" "),a("li",[t._v("[^xyz] 匹配任何没有包含在方括号中的字符")]),t._v(" "),a("li",[t._v("[\\b] 匹配一个退格")]),t._v(" "),a("li",[t._v("\\b 匹配一个词的边界\n"),a("ul",[a("li",[t._v("/\\bm/匹配“moon”中得‘m’；")]),t._v(" "),a("li",[t._v("/oo\\b/并不匹配\"moon\"中得'oo'，因为'oo'被一个词汇字符'n'紧跟着。")]),t._v(" "),a("li",[t._v("/oon\\b/匹配\"moon\"中得'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个词汇字符紧跟着。")]),t._v(" "),a("li",[t._v("/\\w\\b\\w/将不能匹配任何字符串，因为一个单词中的字符永远也不可能被一个非词汇字符和一个词汇字符同时紧跟着")])])]),t._v(" "),a("li",[t._v("\\B 匹配一个非单词边界\n"),a("ul",[a("li",[t._v('/\\B../匹配"noonday"中得\'oo\', 而/y\\B./匹配"possibly yesterday"中得’ye‘')])])]),t._v(" "),a("li",[t._v("\\d 匹配一个数组 [0-9]")]),t._v(" "),a("li",[t._v("\\D 匹配一个非数字自负 [^0-9]")]),t._v(" "),a("li",[t._v("\\f 匹配一个换页符")]),t._v(" "),a("li",[t._v("\\n 匹配一个换行符")]),t._v(" "),a("li",[t._v("\\r 匹配一个回车符")]),t._v(" "),a("li",[t._v("\\s 匹配一个空白字符")]),t._v(" "),a("li",[t._v("\\S 匹配一个非空白字符")]),t._v(" "),a("li",[t._v("\\w 匹配一个单子字符 [A-Za-z0-9]")]),t._v(" "),a("li",[t._v("\\W 匹配一个非单子字符 [^A-Za-z0-9]")]),t._v(" "),a("li",[t._v("\\n 当n是一个正整数，一个返回引用到最后一个与有n插入的正值表达式匹配的富字符窜")]),t._v(" "),a("li",[t._v("\\0 匹配null字符")]),t._v(" "),a("li",[t._v("\\xhh 匹配带有两位小数代码(hh)的字符")]),t._v(" "),a("li",[t._v("\\xhhhh 匹配带有四位小数代码(hh)的字符")])]),t._v(" "),a("h5",{attrs:{id:"正则表达式方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式方法"}},[t._v("#")]),t._v(" 正则表达式方法")]),t._v(" "),a("ul",[a("li",[t._v("exec 一个在字符窜中执行查找匹配的RegExp方法，他返回一个数组（未匹配到则返回null）")]),t._v(" "),a("li",[t._v("test 一个字符窜中测试是否匹配的RegExp方法，他返回true或false")]),t._v(" "),a("li",[t._v("match 一个在字符窜中执行查找匹配的String方法，他返回一个数组（未匹配到则返回null）")]),t._v(" "),a("li",[t._v("search 一个在字符窜中检测匹配的String方法，他返回匹配到的位置索引（失败返回-1）")]),t._v(" "),a("li",[t._v("replace 一个在字符窜中执行查找匹配的String方法，并且使用替换字符窜替换匹配掉的子字符窜")]),t._v(" "),a("li",[t._v("split 一个使用正则表达式或者一个固定字符窜分割一个字符窜，并将分割后的子字符窜存储倒数组中的string方法")])]),t._v(" "),a("p",[a("code",[t._v("当你想要知道再一个字符窜中的一个匹配是否被找到，你可以使用test或search方法")])]),t._v(" "),a("p",[a("code",[t._v("想得到更多的信息则可以使用exec或match方法")])]),t._v(" "),a("h5",{attrs:{id:"正则表达式标志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式标志"}},[t._v("#")]),t._v(" 正则表达式标志")]),t._v(" "),a("ul",[a("li",[t._v("g 全局搜索")]),t._v(" "),a("li",[t._v("i 不区分大小写搜索")]),t._v(" "),a("li",[t._v("m 多行搜索")]),t._v(" "),a("li",[t._v("y 执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标志。")])]),t._v(" "),a("h5",{attrs:{id:"_1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1"}},[t._v("#")]),t._v(" $1 \\1")]),t._v(" "),a("p",[t._v("$1-$9存放着正则表达式中最近的9个表达式的提取结果，这些结果按照匹配的出现顺序依次排列\n基本语法是 RegExp.$n 这些属性是静态的除了replace中的第二个参数可以省略RegExp之外没其他地方都要加上RegExp")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('在regexp 中访问\nvar a1 = /(\\d+)-(\\d+)-(\\d+)/.test("2016-03-26")\nconsole.log(a1)\n// true\nRegExp.$1\n// 2016\nRegExp.$2\n// 03\nRegExp.$3\n// 26\n\n在replace中使用\n"2016-03-26".replace(/(\\d+)-(\\d+)-(\\d+)/,"$1年$2月$3日")\n// 2016年03月26日\n\n\\1 表示后向引用，是指在正则表达式中，从左往右数，第1个()中的内容，以此类推，\\2表示第2个()，\\0表示整个表达式。\n\nvar rgx = /\\d{4}(\\-|\\/|.)\\d{1,2}\\1\\d{1,2}/\n')])])]),a("h4",{attrs:{id:"应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('stringObject.match(searchvalue) // 需要检索的字符窜\nstringObject.match(regexp) // 要匹配的模式的RegExp对象\n\n<script type="text/javascript">\n\nvar str="Hello world!"\ndocument.write(str.match("world") + "<br />")\ndocument.write(str.match("World") + "<br />")\ndocument.write(str.match("worlld") + "<br />")\ndocument.write(str.match("world!"))\n\nworld\nnull\nnull\nworld!\n\n<\/script>\n<script type="text/javascript">\n\nvar str="1 plus 2 equal 3"\nconsole.log(str.match(/\\d+/g))\n// [1,2,3] 输出数组\n<\/script>\n\n\n\nstringObject.replace(regexp/substr,replacement)\n// 1参数 规定子字符窜或要替换的模式RegExp对象\n// 2参数 一个字符窜值，规定了替换文本或生成替换文本的函数\n\n<script type="text/javascript">\n\nvar str="Visit Microsoft!"\ndocument.write(str.replace(/Microsoft/, "W3School"))\n// Visit W3School!\n<\/script>\n\n我们将把 "Doe, John" 转换为 "John Doe" 的形式：\nname = "Doe, John";\nname.replace(/(\\w+)\\s*, \\s*(\\w+)/, "$2 $1");\n\n我们将把所有的花引号替换为直引号：\nname = \'"a", "b"\';\nname.replace(/"([^"]*)"/g, "\'$1\'");\n\n我们将把字符串中所有单词的首字母都转换为大写：\nname = \'aaa bbb ccc\';\nuw=name.replace(/\\b\\w+\\b/g, function(word){\n  return word.substring(0,1).toUpperCase()+word.substring(1);}\n  );\n')])])]),a("h4",{attrs:{id:"应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用实例"}},[t._v("#")]),t._v(" 应用实例")]),t._v(" "),a("h6",{attrs:{id:"js-正则判断判断移动端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-正则判断判断移动端"}},[t._v("#")]),t._v(" js 正则判断判断移动端")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if(/(iphone|iPad|iPod|iOS)/i.test(navigator.userAgent)){\n\twindow.location.href=""\n}\nconsole.log(navigator.userAgent.toLowerCase().match(/iphone/i)=="iphone")\n// true\n')])])]),a("h6",{attrs:{id:"用javascript替换url中的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用javascript替换url中的参数"}},[t._v("#")]),t._v(" 用javascript替换url中的参数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nfunction changeUrlArg(url,arg,val){\n\t\n\tvar pattern = arg+'=([^&]*)';\n\t\n\tvar replaceText = arg+'='+val;\n\n\tif(url.match(pattern)){\n\t\n\t\treturn url.replace(eval('/('+arg+'=)([^&]*)/gi'),replaceText)\n\n\t}else{\n\t\t\n\t\tif(url.match('[\\?]')){\n\t\n\t\t\treturn url+'&'+replaceText\n\n\t\t}else{\n\t\n\t\t\treturn url+'?'+replaceText\n\n\t\t}\n\n\t}\n\n}\n\n\n// url 目标url\n\n// param 需要替换的参数名称\n\n// paramVal 替换以后参数值\n\n// 返回新的url\n\nfunction changUrl(url,param,paramVal){\n\tvar newAddUrl = \"\";\n\tvar tempArray = url.split(\"?\") // 字符串转数组\n\tvar baseUrl = tempArray[0] // 主机名\n\tvar addUrl = tempArray[1] // 参数\n\n\tvar temp = \"\"\n\n\tif(addUrl){\n\t\ttempArray = addUrl.split(\"&\")\n\t\tfor(var i=0;i<tempArray.length;i++){\n\t\t\tif(tempArray[i].split('=')[0]==param){\n\t\t\t\tnewAddurl += temp + tempArray[i];\n\t\t\t\ttemp = \"&\"\n\t\t\t}\n\t\t}\n\t}\n\tvar rows_txt = temp + \"\" +param + \"=\" + paramVal;\n\treturn baseUrl + \"?\" +newAddUrl + rows_txt\n}\n")])])]),a("p",[t._v("正则：")]),t._v(" "),a("p",[t._v("RegExp 对象")]),t._v(" "),a("p",[t._v("RegExp 对象表示正则表达式，它是对字符串执行模式匹配的强大工具")]),t._v(" "),a("p",[t._v("直接量语法：")]),t._v(" "),a("p",[t._v("/pattern/attributes")]),t._v(" "),a("p",[t._v("创建RegExp对象的语法：")]),t._v(" "),a("p",[t._v("new RegExp(pattren,attributes)")]),t._v(" "),a("p",[t._v("参数：")]),t._v(" "),a("p",[t._v("参数pattern是一个字符串，指定了正则表达式的模式或其他正则表达式")]),t._v(" "),a("p",[t._v("参数attributes是一个可选字符串，包含属性g（全局匹配）、i（区分大小写）、m（多行匹配）")]),t._v(" "),a("p",[t._v("返回值：")]),t._v(" "),a("p",[t._v("一个新的RegExp对象，具有指定的模式和标志，如果参数pattern是正则表达式而不是字符串")]),t._v(" "),a("p",[t._v("那么RegExp()构造函数将用与指定的RegExp相同模式和标志创建一个新的RegExp对象")]),t._v(" "),a("p",[t._v("如果不用new运算符，而将regexp()作为函数调用，那么他的行为与用wen运算符调用时一样，")]),t._v(" "),a("p",[t._v("只是当pattern是正则表达式室，他只返回pattern，不是在创建一个新的regexp对象")]),t._v(" "),a("p",[t._v("test : 方法用于检测一个字符窜是否匹配某个模式")]),t._v(" "),a("p",[t._v("用法：")]),t._v(" "),a("p",[t._v("regExpObject.test(string)")]),t._v(" "),a("p",[t._v("返回值： true  false")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n// 检查输入手机号码是否正确\n\n/^1[3|4|5|7|8]\\d{9}$/.test(str)\n\n// 返回true 或者false\n\n\n\n")])])]),a("p",[t._v("replace: 用于在字符窜中用一些字符替换另一些字符，或者替换一个与正则表达式匹配的子串")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("p",[t._v("stringObject.replace(regexp/substr,replacement)")]),t._v(" "),a("p",[t._v("regexp/substr 必需 规定子字符串或要替换的模式的regexp对象")]),t._v(" "),a("p",[t._v("请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为regexp对象")]),t._v(" "),a("p",[t._v("请注意， 无法传入变量")]),t._v(" "),a("p",[t._v("返回值： 一个新的字符窜")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\n// 检测日期格式\n\nnew Date()\n// 返回 Fri Mar 24 2017 16:16:19 GMT+0800 (中国标准时间)\n\n\nvar a = "2017年06月01日";\nvar b = "2017年06月20日";\n\n// 第一种\nvar a1 = a.replace("年","-").replace("月","-").replace("日","")\n// 2017-06-01\n\n// 第二种\nvar a1 = a.replace(/(\\d{4}).(\\d{1,2}).(\\d{1,2}).+/mg,\'$1-$2-$3\')\n// 2017-06-01\n\n// 第三种\nDate.parse(a.replace(\'年\',\'-\').replace(\'月\',\'-\').replace(\'日\',\'\'))\n\n//第四种\nvar a = "2017年06月01日 10:10:10";\na.replace(/(\\d{4}).(\\d{1,2}).(\\d{1,2}).+ (\\d{1,2}).(\\d{1,2}).(\\d{1,2})/mg,\'$1-$2-$3 $4:$5:$6\')\n\nDate.parse(a1)\n// 方法可解析一个日期时间字符窜，并返回毫秒数\n// 格式 ： 2017-01-02 或者 2017/01/01\ndateObject.getTime() \n// 结合date对象使用 返回一个毫秒数  dataObject   new Date()\n\n\n\n')])])]),a("p",[t._v("match : 可在字符窜内检索指定的值，或找到一个或者多个正则表达式的匹配")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("p",[t._v("stringObject.match(searchvalue)  searchvalue 必需 规定要检索的字符串值")]),t._v(" "),a("p",[t._v("stringObject.match(regexp)  regexp 必需 规定要匹配的模式的regexp对象。如果该参数不是regexp对象，则需要首先把它传递给regexp构造函数，将其转换为regexp对象")]),t._v(" "),a("p",[t._v("返回值： 返回指定的值，而不是字符窜位置 （存放匹配结果的数组，该数组的内容依赖于regexp是否具有全局标志g）")]),t._v(" "),a("p",[t._v("如果regexp没有g，那么match()方法就只能在stringObject中执行一次匹配。")]),t._v(" "),a("p",[t._v("如果没有找到任何匹配的文本，match()将返回null。")]),t._v(" "),a("p",[t._v("否则，它将返回一个数组，其中存放了与它找到的匹配文本有关信息。")]),t._v(" "),a("p",[t._v("该数组的第0个元素存放的是匹配文本，而其余的元素存放的是")]),t._v(" "),a("p",[t._v("与正则表达式的子表达式匹配的文本。")]),t._v(" "),a("p",[t._v("除了这些常规的数组元素之外，返回的数组还含有两个对象属性。")]),t._v(" "),a("p",[t._v("index属性声明的是匹配文本的起始字符在stringObject中的位置，")]),t._v(" "),a("p",[t._v("input属性声明的是对stringObject的引用。")]),t._v(" "),a("p",[t._v("如果regexp具有标志g，则match()方法将执行全局检索，找到")]),t._v(" "),a("p",[t._v("stringObject中的所有匹配子字符窜。若没有找到任何匹配的子串，")]),t._v(" "),a("p",[t._v("则返回null。如果找到了一个或者多个匹配子串，则返回一个数组。")]),t._v(" "),a("p",[t._v("不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中")]),t._v(" "),a("p",[t._v("存放的是stringObject中所有的匹配子串，而且也没有index属性或者input属性")]),t._v(" "),a("p",[t._v("注意：在全局检索模式下，match()既不提供与子表达式匹配的文本，也不声明每个匹配子")]),t._v(" "),a("p",[t._v("串的位置。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\n验证邮箱\n\n/^((\\w)+([\\._])?)*(\\w)+@((\\w)+([\\._])?)*(\\w)+\\.[a-zA-Z]{2,3}$/g.test("ma.xio@ng_a@qq.com")\n\n验证一年的12个月：\n\n^(0?[1-9]|1[0-2])$ 正确格式为：“01”-“09”和“1”“12” \n')])])]),a("p",[t._v(".toString(obj) 可以将所有的数据(类型)都转为字符窜，但是要排除null与undefined")]),t._v(" "),a("p",[t._v("obj可以转化进制")]),t._v(" "),a("p",[t._v("String(参数) 可以将null和undefined转换为字符窜，但没法转进制")]),t._v(" "),a("h1",{attrs:{id:"js-原生-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-原生-操作"}},[t._v("#")]),t._v(" js  原生 操作")]),t._v(" "),a("ul",[a("li",[t._v("scrollWidth,clientWidth,offsetWidth的区别")]),t._v(" "),a("li",[t._v("http://blog.csdn.net/u014374031/article/details/56011233")]),t._v(" "),a("li",[t._v("http://www.cnblogs.com/fullhouse/archive/2012/01/16/2324131.html")]),t._v(" "),a("li",[t._v("http://www.jb51.net/article/61460.htm")])]),t._v(" "),a("h3",{attrs:{id:"修改于20170329"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改于20170329"}},[t._v("#")]),t._v(" 修改于20170329")])])}),[],!1,null,null,null);e.default=r.exports}}]);