import{_ as i,c as l,o as e,a4 as s}from"./chunks/framework.DfLtQQLG.js";const g=JSON.parse('{"title":"相等运算符(==)","description":"起因：false == null 结果是false","frontmatter":{"title":"相等运算符(==)","description":"起因：false == null 结果是false","wtime":"2020-10-10 10:00:00","deTags":["javascript"]},"headers":[],"relativePath":"blogs1/posts/javascript/js-equal.md","filePath":"blogs1/posts/javascript/js-equal.md"}'),a={name:"blogs1/posts/javascript/js-equal.md"},t=s(`<h1 id="" tabindex="-1">== <a class="header-anchor" href="#" aria-label="Permalink to &quot;==&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">理解</p><p>相等运算符（<code>==</code>）检查其两个操作数是否相等，返回一个布尔值结果。如果是不同类型的操作数，会尝试强制类型转换(<code>两个操作数的类型是一样了再比较</code>)。</p></div><h3 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-label="Permalink to &quot;规则&quot;">​</a></h3><p>两个操作数类型不同在比较的时候，虽然说是会尝试强制类型转换，但也会出现例外的情况。</p><p>下面是展示的规则：</p><p>1、如果操作数具有相同的类型，则按如下方式进行比较：</p><div class="caution custom-block github-alert"><p class="custom-block-title">相同类型</p><p>对象（Object）：仅当两个操作数引用同一个对象时返回 true。</p><p>字符串（String）：只有当两个操作数具有相同的字符且顺序相同时才返回 true。</p><p>数值（Number）：如果两个操作数的值相同，则返回 true。+0 和 -0 被视为相同的值。如果任何一个操作数是 NaN，返回 false；所以，NaN 永远不等于 NaN。</p><p>布尔值（Boolean）：仅当操作数都为 true 或都为 false 时返回 true。</p><p>大整形（BigInt）：仅当两个操作数值相同时返回 true。</p><p>符号（Symbol）：仅当两个操作数引用相同的符号时返回 true。</p></div><p>2、如果其中一个操作数为 <code>null</code> 或 <code>undefined</code>，另一个操作数也必须为 <code>null</code> 或 <code>undefined</code> 以返回 <code>true</code>。否则返回 <code>false</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是规定</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span></code></pre></div><p>3、如果其中一个操作数是对象，另一个是基本类型，按此顺序使用对象的 @@toPrimitive()、valueOf() 、 toString() 方法将对象转换为基本类型。</p><p>4、两个操作数都被转换为基本类型（String、Number、Boolean、Symbol 和 BigInt 中的一个）。其余的转换是逐个进行的。</p><div class="caution custom-block github-alert"><p class="custom-block-title">比较</p><p>如果是相同的类型，使用步骤 1 进行比较。</p><p>如果其中一个操作数是 Symbol 而另一个不是，返回 false。</p><p>如果其中一个操作数是布尔型而另一个不是，则将布尔型转换为数字：true 转换为 1，false 转换为 0。然后再次松散地比较两个操作数。</p><p>Number to String：使用与 Number() 构造函数相同的算法将字符串转换为数字。转换失败将导致 NaN，这将保证相等是 false。</p><p>Number to BigInt：按数值进行比较。如果数值为 ±∞ 或 NaN，返回 false。</p><p>String to BigInt：使用与 BigInt() 构造函数相同的算法将字符串转换为 BigInt。如果转换失败，返回 false。</p></div><p>5、<code>NaN</code> 不等于（通过 <code>==</code>、<code>!=</code>、<code>===</code> 和 <code>!==</code>）任何其他值——包括与另一个 <code>NaN</code> 值。NaN跟任何值比较都返回false。</p><p>6、不要试图通过类型转换<code>null</code>、<code>undefined</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre></div><p>上面的算法有一个“故意违反”：如果其中一个操作数是 <code>document.all</code>，则它被视为 undefined。这意味着 <code>document.all == null</code> 是 true，但 <code>document.all === undefined &amp;&amp; document.all === null</code> 是 false。</p><h3 id="mdn" tabindex="-1">MDN <a class="header-anchor" href="#mdn" aria-label="Permalink to &quot;MDN&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="noreferrer">JavaScript 数据类型和数据结构</a><ul><li>js是动态类型。它可以被赋予或重新赋予</li><li>js是弱类型。它允许隐式类型转换</li><li>除了 <code>null</code>，所有原始类型都可以使用 <code>typeof</code> 运算符进行测试。<code>typeof null</code> 返回 &quot;<code>object</code>&quot;，因此必须使用 <code>=== null</code> 来测试 <code>null</code>。</li><li>在 <code>null</code> 或 <code>undefined</code> 上访问属性时，报错</li><li><code>null</code> 变量未指向任何对象</li><li><code>undefined</code>一个没有被赋值的变量的类型</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Immutable" target="_blank" rel="noreferrer">不可变的（Immutable）</a><ul><li>不可变值指的是，如果不创建一个全新的值替换它，它的内容是无法更改的。</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noreferrer">原始值</a><ul><li>string、number、bigint、boolean、undefined、symbol、null</li><li>所有原始值都是不可变的。重要的是不要将原始值本身与分配了原始值的变量混淆</li></ul></li></ul><h3 id="课外" tabindex="-1">课外 <a class="header-anchor" href="#课外" aria-label="Permalink to &quot;课外&quot;">​</a></h3><ul><li><p>ToPrimitive(input, [PreferredType]) 将输入的参数转化为非对象类型</p><ul><li>input 输入参数</li><li>preferredType 可选参数，需要转化成什么类型</li><li>如果是基本类型<code>Undefined Null Boolean Number String Symbol</code> 返回他们本身</li><li>如果是<code>Object</code><ul><li>preferredType = string <ul><li>先调用toString(), 如果返回原始值则return；否则调用valueOf()</li></ul></li><li>preferredType = number <ul><li>先调用valueOf(), 如果返回原始值则return；否则调用toString()</li></ul></li><li>preferredType = &#39;&#39; <ul><li>如果对象是Date，则 preferredType被设置为string</li><li>否则preferredType 被设置为number</li></ul></li></ul></li><li>Object.prototype.toString() 对象的字符串</li><li>Object.prototype.valueOf() 对象的原始值</li></ul></li><li><p>ToBoolean(argument) 将参数转为boolean类型</p><ul><li>如果是<code>Undefined Null</code> 则返回“false”</li><li>如果是<code>Object Symbol</code> 则返回“true”</li><li>如果是<code>Number</code><ul><li>如果是<code>+0 -0 NaN</code> 则返回 “false”</li><li>否则返回“true”</li></ul></li><li>如果是<code>String</code><ul><li>如果是空字符串 则返回“false”</li><li>否则返回“true”</li></ul></li></ul></li><li><p>ToNumber(argument) 将参数转为number类型</p><ul><li>如果是<code>Undefined</code> 则返回 “NaN”</li><li>如果是 <code>Null</code> 则返回 “+0”</li><li>如果是 <code>Boolean</code><ul><li>如果入参论据“true” 返回 “+1”</li><li>如果入参论据“false” 返回 “+0”</li></ul></li><li>如果是 <code>String</code> 则 涉及到编码自己看吧 <ul><li>如果无法将字符串解释为<code>StringNumericLiteral</code>的扩展，则ToNumber(string) 返回NaN</li><li>如果是空、空格(whatespace)返回‘0’</li><li><a href="//www.ecma-international.org/ecma-262/6.0/index.html#sec-tonumber" target="_blank" rel="noreferrer">规则</a></li></ul></li><li>如果是<code>Symbol</code> 则 抛出“typeError”</li><li>如果是<code>Object</code> 则 “ToNumber(ToPrimitive(argument, hint Number))”</li></ul></li><li><p>ToString(argument) 将参数转换为string类型</p><ul><li>如果是 <code>undefined</code> 返回 ‘undefined’</li><li>如果是 <code>Null</code> 返回 ‘null’</li><li>如果是 <code>Boolean</code><ul><li>如果是 ·true· 返回 ‘true’</li><li>如果是 <code>false</code> 返回 ‘false’</li></ul></li><li>如果是<code>Number</code> 则 <ul><li>如果argument是NaN,则返回字符串NaN</li><li>如果argument是+0、-0，则返回字符串0</li><li>如果argument小于0，则返回字符串argument</li><li>如果argument是正无穷大， 则返回字符串 &quot;Infinity&quot;</li><li>剩下的就是进制的区别，自己去看吧</li></ul></li><li>如果是 <code>string</code> 返回 本身</li><li>如果是<code>Symbol</code> 返回 ‘TypeError’</li><li>如果是<code>Object</code> 返回 ‘ToString(ToPrimivite(argument, hint String))’</li></ul></li><li><p>toObject(argument) 将参数转换为object类型</p><ul><li>如果是 <code>undefined</code> 返回 抛出‘TypeError’</li><li>如果是 <code>Null</code> 返回 抛出‘TypeError’</li><li>如果是 <code>Boolean</code> 返回一个boolean对象</li><li>如果是<code>Number</code> 返回一个Number对象</li><li>如果是 <code>string</code> 返回一个string对象</li><li>如果是<code>Symbol</code> 返回一个ymbol对象</li><li>如果是<code>Object</code> 返回 本身</li></ul></li></ul><p>接下来正题：</p><h3 id="抽象相等比较" tabindex="-1">抽象相等比较 <a class="header-anchor" href="#抽象相等比较" aria-label="Permalink to &quot;抽象相等比较&quot;">​</a></h3><ul><li>如果类型x与类型y相同， <ul><li>如果x是undefined，返回true</li><li>如果x是null，返回true</li><li>如果x的类型是number <ul><li>y的类型是NaN，返回false</li><li>如果x是NaN，返回false</li><li>x是+0，y是-0，返回true</li><li>x是-0，y是+0，返回true</li><li>如果x，y值相同，返回true</li></ul></li><li>如果x是字符串，如果他们完全相同，返回true，否则返回false</li><li>如果x是布尔值，他们都是true或者false，返回true，否则返回false</li><li>如果x、y引用的是同一个对象，返回true，否则返回false</li></ul></li><li>如果x为null，y为undefined，则返回true</li><li>如果x为undefined，y为null，则返回true</li><li>如果x的类型是string，y的类型是number，则比较结果ToNumber(x) == y</li><li>如果x的类型是number，y的类型是string，则比较结果x == ToNumber(y)</li><li>如果x的类型是boolean，则比较结果ToNumber(x) == y</li><li>如果y的类型是boolean，则比较结果 x == ToNumber(y)</li><li>如果x的类型是string、number、symbol，y的类型是object，则比较结果是 x == ToPrimitive(y, [string\\number\\symbol])</li><li>如果x的类型是object，y的类型是string、number、symbol ，则比较ToPrimitive(x) == y</li></ul><h3 id="严格相等比较" tabindex="-1">严格相等比较 <a class="header-anchor" href="#严格相等比较" aria-label="Permalink to &quot;严格相等比较&quot;">​</a></h3><ul><li>如果x的类型与y的类型不同，返回false</li><li>如果x,y的类型是Undefined,返回true</li><li>如果x,y的类型是Null,返回true</li><li>如果x,y的类型是number <ul><li>如果是 x是NaN，返回false</li><li>如果是 y是NaN，返回false</li><li>如果x，y返回的值相同，返回true</li><li>如果x是+0，y是-0，返回true</li><li>如果x是-0，y是+0，返回true</li></ul></li><li>如果x，y是string <ul><li>如果是相同的编码，相同的长度，返回true</li><li>否则返回false</li></ul></li><li>如果x，y是boolean <ul><li>如果x，y都是true或者false，返回true</li><li>否则返回false</li></ul></li><li>如果x，y是相同的symbol值，返回true</li><li>如果x,y是相同的object值，返回true</li></ul>`,25),n=[t];function o(r,d,u,p,c,h){return e(),l("div",null,n)}const y=i(a,[["render",o]]);export{g as __pageData,y as default};
